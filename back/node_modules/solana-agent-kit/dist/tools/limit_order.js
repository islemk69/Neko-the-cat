"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.limitOrder = limitOrder;
const web3_js_1 = require("@solana/web3.js");
const manifest_sdk_1 = require("@cks-systems/manifest-sdk");
const OrderType_1 = require("@cks-systems/manifest-sdk/client/ts/src/wrapper/types/OrderType");
/**
 * Place limit orders using Manifest
 * @param agent SolanaAgentKit instance
 * @param marketId Public key for the manifest market
 * @param quantity Amount to trade in tokens
 * @param side Buy or Sell
 * @param price Price in tokens ie. SOL/USDC
 * @returns Transaction signature
 */
async function limitOrder(agent, marketId, quantity, side, price) {
    try {
        const mfxClient = await manifest_sdk_1.ManifestClient.getClientForMarket(agent.connection, marketId, agent.wallet);
        const orderParams = {
            numBaseTokens: quantity,
            tokenPrice: price,
            isBid: side === "Buy",
            lastValidSlot: 0,
            orderType: OrderType_1.OrderType.Limit,
            clientOrderId: Number(Math.random() * 1000),
        };
        const depositPlaceOrderIx = await mfxClient.placeOrderWithRequiredDepositIx(agent.wallet.publicKey, orderParams);
        const signature = await (0, web3_js_1.sendAndConfirmTransaction)(agent.connection, new web3_js_1.Transaction().add(...depositPlaceOrderIx), [agent.wallet]);
        return signature;
    }
    catch (error) {
        throw new Error(`Limit Order failed: ${error.message}`);
    }
}
//# sourceMappingURL=limit_order.js.map