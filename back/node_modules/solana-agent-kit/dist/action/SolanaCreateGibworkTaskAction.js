"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaCreateGibworkTaskAction = void 0;
const zod_1 = require("zod");
exports.SolanaCreateGibworkTaskAction = {
    name: "create_gibwork_task",
    similes: ["create_gibwork_task", "create_task"],
    description: `Create a task on Gibwork.

  Inputs:
  title: string (required)
  content: string (required)
  requirements: string (required)
  tags: string[] (required)
  tokenMintAddress: string (required)
  amount: number (required)
  payer?: string (optional, defaults to agent wallet)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                title: "Create a DApp",
                                content: "Need a new DApp built",
                                requirements: "Solidity experience required",
                                tags: ["solidity", "web3"],
                                tokenMintAddress: "So11111111111111111111111111111111111111112",
                                amount: 1000
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { taskId: "task_id_here", signature: "tx_signature_here" }
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const taskData = await agent.createGibworkTask(input.title, input.content, input.requirements, input.tags, input.tokenMintAddress, input.amount, input.payer);
        const response = {
            status: "success",
            taskId: taskData.taskId,
            signature: taskData.signature,
        };
        return {
            success: true,
            data: response,
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                title: zod_1.z.string(),
                content: zod_1.z.string(),
                requirements: zod_1.z.string(),
                tags: zod_1.z.array(zod_1.z.string()),
                tokenMintAddress: zod_1.z.string(),
                amount: zod_1.z.number().positive(),
                payer: zod_1.z.string().optional()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaCreateGibworkTaskAction.js.map