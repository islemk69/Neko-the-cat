"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaDeployCollectionAction = void 0;
const zod_1 = require("zod");
exports.SolanaDeployCollectionAction = {
    name: "solana_deploy_collection",
    similes: ["create_collection", "deploy_collection"],
    description: `Deploy a new NFT collection on Solana blockchain.

  Inputs:
  name: string, eg "My Collection" (required)
  uri: string, eg "https://example.com/collection.json" (required)
  royaltyBasisPoints?: number, eg 500 for 5% (optional)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                name: "MyCollection",
                                symbol: "MC",
                                uri: "https://example.com/metadata.json",
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: {
                        collectionAddress: "So11111111111111111111111111111111111111112",
                    },
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const payload = {
            name: input.name,
            uri: input.uri,
            royaltyBasisPoints: input.royaltyBasisPoints,
        };
        const result = await agent.deployCollection(payload);
        return {
            success: true,
            data: {
                collectionAddress: result.collectionAddress.toString(),
                name: input.name,
            },
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                name: zod_1.z.string(),
                symbol: zod_1.z.string(),
                uri: zod_1.z.string(),
                royaltyBasisPoints: zod_1.z.number().optional()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaDeployCollectionAction.js.map