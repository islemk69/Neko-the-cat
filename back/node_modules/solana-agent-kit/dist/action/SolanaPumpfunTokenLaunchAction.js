"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaPumpfunTokenLaunchAction = void 0;
const zod_1 = require("zod");
exports.SolanaPumpfunTokenLaunchAction = {
    name: "solana_launch_pumpfun_token",
    similes: ["launch_token", "create_token"],
    description: `Launch a token on Pump.fun.
   Do not use this for creating SPL tokens.

   Inputs:
   tokenName: string, eg "PumpFun Token" (required)
   tokenTicker: string, eg "PUMP" (required)
   description: string, eg "PumpFun Token description" (required)
   imageUrl: string, eg "https://i.imgur.com/UFm07Np_d.png" (required)
   twitter?: string (optional)
   telegram?: string (optional)
   website?: string (optional)
   initialLiquiditySOL?: number (optional)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                tokenName: "PumpfunToken",
                                tokenTicker: "PFT",
                                description: "Example token",
                                imageUrl: "https://example.com/image.png"
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { tokenAddress: "So11111111111111111111111111111111111111112" },
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const result = await agent.launchPumpFunToken(input.tokenName, input.tokenTicker, input.description, input.imageUrl, {
            twitter: input.twitter,
            telegram: input.telegram,
            website: input.website,
            initialLiquiditySOL: input.initialLiquiditySOL,
        });
        return {
            success: true,
            data: {
                tokenName: input.tokenName,
                tokenTicker: input.tokenTicker,
                result
            }
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                tokenName: zod_1.z.string(),
                tokenTicker: zod_1.z.string(),
                description: zod_1.z.string(),
                imageUrl: zod_1.z.string(),
                twitter: zod_1.z.string().optional(),
                telegram: zod_1.z.string().optional(),
                website: zod_1.z.string().optional(),
                initialLiquiditySOL: zod_1.z.number().optional()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaPumpfunTokenLaunchAction.js.map