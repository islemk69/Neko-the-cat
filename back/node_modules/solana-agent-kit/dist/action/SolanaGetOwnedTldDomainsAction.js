"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaGetOwnedTldDomainsAction = void 0;
const zod_1 = require("zod");
exports.SolanaGetOwnedTldDomainsAction = {
    name: "solana_get_owned_tld_domains",
    similes: ["get_owned_tld_domains", "fetch_owned_tld_domains"],
    description: `Get all domains owned by the agent's wallet for a specific TLD.

  Inputs:
  tld: string, eg "bonk" (required)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                tld: "bonk"
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { domains: ["example1.bonk", "example2.bonk"] }
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const domains = await agent.getOwnedDomainsForTLD(input.tld);
        return {
            success: true,
            data: {
                domains,
                tld: input.tld
            }
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                tld: zod_1.z.string()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaGetOwnedTldDomainsAction.js.map