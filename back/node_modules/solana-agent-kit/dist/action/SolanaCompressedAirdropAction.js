"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaCompressedAirdropAction = void 0;
const zod_1 = require("zod");
exports.SolanaCompressedAirdropAction = {
    name: "solana_compressed_airdrop",
    similes: ["compressed_airdrop", "airdrop_tokens"],
    description: `Airdrop SPL tokens with ZK Compression.

  Inputs:
  mintAddress: string (required)
  amount: number (required)
  decimals: number (required)
  recipients: string[] (required)
  priorityFeeInLamports?: number (optional, default: 30000)
  shouldLog?: boolean (optional, default: false)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                mintAddress: "So11111111111111111111111111111111111111112",
                                amount: 100,
                                decimals: 9,
                                recipients: ["addr1", "addr2"]
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { transactionId: "5G9f8..." },
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const txs = await agent.sendCompressedAirdrop(input.mintAddress, input.amount, input.decimals, input.recipients, input.priorityFeeInLamports || 30000, input.shouldLog || false);
        return {
            success: true,
            data: {
                transactionHashes: txs,
                message: `Airdropped ${input.amount} tokens to ${input.recipients.length} recipients.`
            },
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                mintAddress: zod_1.z.string(),
                amount: zod_1.z.number().positive(),
                decimals: zod_1.z.number().int().min(0),
                recipients: zod_1.z.array(zod_1.z.string()),
                priorityFeeInLamports: zod_1.z.number().optional(),
                shouldLog: zod_1.z.boolean().optional(),
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaCompressedAirdropAction.js.map