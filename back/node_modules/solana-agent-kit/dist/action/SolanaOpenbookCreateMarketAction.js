"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaOpenbookCreateMarketAction = void 0;
const web3_js_1 = require("@solana/web3.js");
const zod_1 = require("zod");
exports.SolanaOpenbookCreateMarketAction = {
    name: "solana_openbook_create_market",
    similes: ["create_market", "openbook_create_market"],
    description: `Create an Openbook market (required for AMM V4).

  Inputs:
  baseMint: string (required)
  quoteMint: string (required)
  lotSize: number (required)
  tickSize: number (required)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                baseMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                                quoteMint: "So11111111111111111111111111111111111111112",
                                lotSize: 100,
                                tickSize: 1
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { marketAddress: "market_pubkey_here" }
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const tx = await agent.openbookCreateMarket(new web3_js_1.PublicKey(input.baseMint), new web3_js_1.PublicKey(input.quoteMint), input.lotSize, input.tickSize);
        return {
            success: true,
            data: {
                transaction: tx,
                message: "Created Openbook market successfully"
            }
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                baseMint: zod_1.z.string(),
                quoteMint: zod_1.z.string(),
                lotSize: zod_1.z.number().positive(),
                tickSize: zod_1.z.number().positive()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaOpenbookCreateMarketAction.js.map