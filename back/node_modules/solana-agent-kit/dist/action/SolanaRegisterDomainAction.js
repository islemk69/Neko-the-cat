"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaRegisterDomainAction = void 0;
const zod_1 = require("zod");
exports.SolanaRegisterDomainAction = {
    name: "solana_register_domain",
    similes: ["register_domain", "create_domain"],
    description: `Register a .sol domain name for your wallet.

  Inputs:
  name: string, eg "mydomain.sol" (required)
  spaceKB: number, eg 1 (optional, default is 1)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                domain: "example.sol",
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: {
                        domainAddress: "So11111111111111111111111111111111111111112",
                    },
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const tx = await agent.registerDomain(input.name, input.spaceKB || 1);
        return {
            success: true,
            data: {
                transaction: tx,
                domain: `${input.name}.sol`,
                spaceKB: input.spaceKB || 1
            }
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                name: zod_1.z.string(),
                spaceKB: zod_1.z.number().optional()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaRegisterDomainAction.js.map