"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaRaydiumCreateCpmmAction = void 0;
const web3_js_1 = require("@solana/web3.js");
const anchor_1 = require("@coral-xyz/anchor");
const zod_1 = require("zod");
exports.SolanaRaydiumCreateCpmmAction = {
    name: "raydium_create_cpmm",
    similes: ["create_cpmm", "raydium_create_cpmm"],
    description: `Create Raydium's newest CPMM pool that supports Token 2022 standard.

  Inputs:
  mint1: string (required)
  mint2: string (required)
  configId: string (required) - stores pool info, index, protocolFeeRate, tradeFeeRate, fundFeeRate
  mintAAmount: number(int) (required)
  mintBAmount: number(int) (required)
  startTime: number(seconds) (required)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                mint1: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                                mint2: "So11111111111111111111111111111111111111112",
                                configId: "config_pubkey_here",
                                mintAAmount: 1000000,
                                mintBAmount: 1000000,
                                startTime: Math.floor(Date.now() / 1000)
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { txId: "transaction_hash_here" }
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const tx = await agent.raydiumCreateCpmm(new web3_js_1.PublicKey(input.mint1), new web3_js_1.PublicKey(input.mint2), new web3_js_1.PublicKey(input.configId), new anchor_1.BN(input.mintAAmount), new anchor_1.BN(input.mintBAmount), new anchor_1.BN(input.startTime));
        return {
            success: true,
            data: {
                transaction: tx,
                message: "Created Raydium CPMM pool successfully"
            }
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                mint1: zod_1.z.string(),
                mint2: zod_1.z.string(),
                configId: zod_1.z.string(),
                mintAAmount: zod_1.z.number().int().positive(),
                mintBAmount: zod_1.z.number().int().positive(),
                startTime: zod_1.z.number().int()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaRaydiumCreateCpmmAction.js.map