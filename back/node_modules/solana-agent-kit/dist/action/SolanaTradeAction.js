"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaTradeAction = void 0;
// SolanaTradeAction.ts
const web3_js_1 = require("@solana/web3.js");
const zod_1 = require("zod");
exports.SolanaTradeAction = {
    name: "solana_trade",
    similes: ["swap_tokens", "trade_tokens"],
    description: `Swap tokens using Jupiter Exchange.

  Inputs:
  outputMint: string (required)
  inputAmount: number (required)
  inputMint?: string (optional)
  slippageBps?: number (optional)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                outputMint: "So11111111111111111111111111111111111111112",
                                inputAmount: 1,
                                inputMint: "SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa",
                                slippageBps: 100,
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { transactionId: "5G9f8..." },
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const tx = await agent.trade(new web3_js_1.PublicKey(input.outputMint), input.inputAmount, input.inputMint ? new web3_js_1.PublicKey(input.inputMint) : new web3_js_1.PublicKey("So11111111111111111111111111111111111111112"), input.slippageBps);
        return {
            success: true,
            data: {
                transaction: tx,
                inputAmount: input.inputAmount,
                inputToken: input.inputMint || "SOL",
                outputToken: input.outputMint
            }
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                outputMint: zod_1.z.string(),
                inputAmount: zod_1.z.number(),
                inputMint: zod_1.z.string().optional(),
                slippageBps: zod_1.z.number().optional()
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaTradeAction.js.map