"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaTransferAction = void 0;
const web3_js_1 = require("@solana/web3.js");
const zod_1 = require("zod");
exports.SolanaTransferAction = {
    name: "solana_transfer",
    similes: ["send_tokens", "transfer_sol"],
    description: `Transfer tokens or SOL to another address ( also called as wallet address ).

  Inputs ( input is a JSON string ):
  to: string, eg "8x2dR8Mpzuz2YqyZyZjUbYWKSWesBo5jMx2Q9Y86udVk" (required)
  amount: number, eg 1 (required)
  mint?: string, eg "So11111111111111111111111111111111111111112" or "SENDdRQtYMWaQrBroBrJ2Q53fgVuq95CV9UPGEvpCxa" (optional)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                to: "8x2dR8Mpzuz2YqyZyZjUbYWKSWesBo5jMx2Q9Y86udVk",
                                amount: 1,
                                mint: "So11111111111111111111111111111111111111112",
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: { success: true, data: { transactionId: "5G9f8..." } },
            },
        ],
    ],
    handler: async (agent, input) => {
        const convert = async () => {
            const recipient = new web3_js_1.PublicKey(input.to);
            const mintAddress = input.mint ? new web3_js_1.PublicKey(input.mint) : undefined;
            const tx = await agent.transfer(recipient, input.amount, mintAddress);
            const result = {
                success: true,
                data: { transactionId: tx },
            };
            return result;
        };
        return convert();
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                to: zod_1.z.string(),
                amount: zod_1.z.number(),
                mint: zod_1.z.string().optional(),
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaTransferAction.js.map