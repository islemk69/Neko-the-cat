"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SolanaCreateSingleSidedWhirlpoolAction = void 0;
const web3_js_1 = require("@solana/web3.js");
const decimal_js_1 = __importDefault(require("decimal.js"));
const anchor_1 = require("@coral-xyz/anchor");
const zod_1 = require("zod");
const tools_1 = require("../tools");
exports.SolanaCreateSingleSidedWhirlpoolAction = {
    name: "create_orca_single_sided_whirlpool",
    similes: ["create_whirlpool", "single_sided_whirlpool"],
    description: `Create a single-sided Whirlpool with liquidity.

  Inputs:
  depositTokenAmount: number (required, in units of deposit token including decimals)
  depositTokenMint: string (required, mint address of deposit token)
  otherTokenMint: string (required, mint address of other token)
  initialPrice: number (required, initial price of deposit token in terms of other token)
  maxPrice: number (required, maximum price at which liquidity is added)
  feeTier: number (required, fee tier for the pool)`,
    examples: [
        [
            {
                input: {
                    message: {
                        id: "1",
                        content: {
                            text: JSON.stringify({
                                depositTokenAmount: 1000000000,
                                depositTokenMint: "EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v",
                                otherTokenMint: "So11111111111111111111111111111111111111112",
                                initialPrice: 0.001,
                                maxPrice: 5.0,
                                feeTier: 0.3
                            }),
                        },
                        userId: "user1",
                        timestamp: Date.now(),
                    },
                },
                output: {
                    success: true,
                    data: { txId: "transaction_hash_here" }
                },
            },
        ],
    ],
    handler: async (agent, input) => {
        const txId = await agent.createOrcaSingleSidedWhirlpool(new anchor_1.BN(input.depositTokenAmount), new web3_js_1.PublicKey(input.depositTokenMint), new web3_js_1.PublicKey(input.otherTokenMint), new decimal_js_1.default(input.initialPrice), new decimal_js_1.default(input.maxPrice), input.feeTier);
        return {
            success: true,
            data: {
                transaction: txId,
                message: "Single-sided Whirlpool created successfully"
            }
        };
    },
    validate: async (context, ...args) => {
        const input = args[0];
        try {
            const schema = zod_1.z.object({
                depositTokenAmount: zod_1.z.number().positive(),
                depositTokenMint: zod_1.z.string(),
                otherTokenMint: zod_1.z.string(),
                initialPrice: zod_1.z.number().positive(),
                maxPrice: zod_1.z.number().positive(),
                feeTier: zod_1.z.number().refine((val) => val in tools_1.FEE_TIERS),
            });
            return schema.safeParse(input).success;
        }
        catch {
            return false;
        }
    },
};
//# sourceMappingURL=SolanaCreateSingleSidedWhirlpoolAction.js.map